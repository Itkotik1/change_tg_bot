from aiogram import F, Router, Dispatcher, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
from sqlite.database import db_start, register_or_update_user

router = Router()

class Register(StatesGroup):
    name = State()
    age = State()
    phone_number = State()

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}.\n'
                         f'–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç –∫–æ—Ñ–µ–π–Ω–∏-–ø–µ–∫–∞—Ä–Ω–∏ "–ü–µ—Ä–µ–º–µ–Ω–∞".')

@router.message(Command('help'))
async def cmd_help(message: types.Message):
    await message.answer(f'–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏  –í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π: '
                         "/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
                         "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π\n"
                         "/catalog - —Ä–∞–∑–¥–µ–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")

@router.message(Command('catalog'))
async def cmd_catalog(message: types.Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª üëá', reply_markup=kb.main)

@router.message(F.text == '–ú–µ–Ω—é')
async def menu(message: types.Message):
    await message.answer('–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä: ', reply_markup=kb.menu)

@router.callback_query(F.data == 'coffee')
async def coffee_callback(callback: types.CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ—Ñ–µ')

@router.callback_query(F.data == 'not coffee')
async def not_coffee_callback(callback: types.CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–µ –∫–æ—Ñ–µ')

@router.callback_query(F.data == 'bakery')
async def bakery_callback(callback: types.CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤—ã–ø–µ—á–∫–∞')

@router.message(Command('register'))
async def register(message: types.Message, state: FSMContext):
    await state.set_state(Register.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')

@router.message(Register.name)
async def register_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.age)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç')

@router.message(Register.age)
async def register_age(message: types.Message, state: FSMContext):
    await state.update_data(age=int(message.text))
    await state.set_state(Register.phone_number)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.get_number)

@router.message(Register.phone_number, F.contact)
async def register_number(message: Message, state: FSMContext):
    await state.update_data(phone_number=message.contact.phone_number)
    data = await state.get_data()
    await message.answer(f'–í–∞—à–µ –∏–º—è: {data["name"]}\n–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {data["age"]}\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data["phone_number"]}\n')
    await register_or_update_user(user_id=message.from_user.id, name=data['name'], age=data['age'], phone_number=data['phone_number'])
    await message.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!')
    await state.clear()